# time-stamp opts (used to be command 'ts')
#
1,$ s/--full[yY]ear/--full-year/g
1,$ s/--no[mM]inutes/--no-minutes/g
1,$ s/--no[sS]econds/--no-seconds/g
1,$ s/--only[dD]ate/--only-date/g
1,$ s/--only[tT]ime/--only-time/g
1,$ s/--round[hH]alf/--round-half/g
1,$ s/--round[qQ]uarter/--round-quarter/g

# rm-spaces opts (used to be command rmSpaces)
#
1,$ s/--regularFiles/--regular-files/g
1,$ s/--removeQuotes/--remove-quotes/g
1,$ s/--camelCase/--camel-case/g
1,$ s/--noDates/--no-dates/g

# Command name changes, no more camelCase names.

1,$ s/\<rmSpaces\>/rm-spaces/g

# This next name is better with "mod-" prefix since it modifies file times.
#
1,$ s/\<tstamp\>/mod-tstamp/g

# This next substitution may cause unintended changes because the
# regular-expression-word \<ts\> is so short.
#
# For example, say some command in a script you are updating has
# short options '-t' and '-s' but someone combined them exactly
# like '-ts', then this next sed substitution may change it to
# '-time-stamp', which of course is not what you want.
# Another example is .vimrc might have "set ts=4" to set
# tabstops to 4, which obviously you don't want to change.
#
# consider running "grep '[^\.]\<ts\>[^-\.]' * .*" in any directory that
# you want to run this sed.script to see what hits you get, perhaps
# collecting a list of files, and editing it so you only 'runsed' on those files
# with ONLY the following sed instruction.
#
# Check .runsed.diff.runsed CAREFULLY!
#
1,$ s/\([^\.]\)\<ts\>\([^-\.]\)/\1time-stamp\2/g      # Wasn't a good idea to call this command ts, see 'man ts(1)'!
